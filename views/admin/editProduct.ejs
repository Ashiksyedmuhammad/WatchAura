<%- include('../admin-layouts/header.ejs') %>



<body>
    <div class="container mt-5">
        <h2 class="text-center mb-4">Edit Product</h2>

        <%- include('../admin-layouts/header.ejs') %>

<style>
    .image-upload-container {
        position: relative;
        text-align: center;
    }
    .img-preview {
        max-width: 100%;
        max-height: 200px;
        object-fit: cover;
        margin-top: 10px;
    }
    .upload-placeholder {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 150px;
        border: 2px dashed #ddd;
        background: #f9f9f9;
        border-radius: 4px;
    }
    .upload-placeholder i {
        font-size: 2em;
        margin-right: 10px;

    }
</style>
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<body>
    <div class="container mt-5">
        <!-- <h2 class="text-center mb-4">Edit Product</h2> -->

        <form id="editProductForm" enctype="multipart/form-data">
            <div class="container-xxl flex-grow-1 container-p-y">
                <div class="app-ecommerce">
                    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-6 gap-4 gap-md-0">
                        <div class="d-flex flex-column justify-content-center">
                            <!-- <h4 class="mb-1">Edit Product</h4> -->
                        </div>
                        <div class="d-flex align-content-center flex-wrap gap-4">
                            <button type="submit" class="btn btn-primary waves-effect waves-light">Update Product</button>
                        </div>
                    </div>

                    <div class="row">
                        <!-- First column -->
                        <div class="col-12 col-lg-8">
                            <!-- Product Information -->
                            <div class="card mb-6">
                                <div class="card-header">
                                    <h5 class="card-tile mb-0">Product Information</h5>
                                </div>
                                <div class="card-body">
                                    <div class="form-floating form-floating-outline mb-5">
                                        <div class="formgroup1">
                                            <label for="ecommerce-product-name" class="errMsgSignup">Product Name</label>
                                            <input type="text" class="form-control" id="product-name" placeholder="Product title" name="productTitle" value="<%= product.productName %>" required>
                                        </div>
                                    </div>
                                    <div class="form-control p-0 pt-1 comment-editor border-0 pb-1 ql-container ql-snow" id="ecommerce-category-description">
                                        <div class="formgroup1">
                                            <label for="ecommerce-product-description" class="mb-1 errMsgSignup">Description</label>
                                            <textarea class="form-control" id="product-description" name="ProductDescription" rows="4" required><%= product.description %></textarea>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- Media -->
                            <div class="card mb-6">
                                <div class="card-header">
                                    <h5 class="mb-0 card-title">Product Images</h5>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <% for(let i = 0; i < 3; i++) { %>
                                            <div class="col-md-4 mb-3">
                                                <div class="image-upload-container">
                                              
                                    
                                    
                                                    <input type="file" class="imageInput image-upload-input" id="productImage<%= i+1 %>" name="productImage" accept="image/*" onchange="previewImage(this, 'imagePreview<%= i+1 %>')">
                                                    <input type="hidden" id="existingImage<%= i+1 %>" name="existingImage<%= i+1 %>" value="<%= product.images[i] %>">
                                                    <label for="productImage<%= i+1 %>" class="image-upload-label errMsgSignup">
                                                        <div class="upload-placeholder" style="display: <%= product.images[i] ? 'none' : 'flex' %>;">
                                                            <i class="fas fa-cloud-upload-alt"></i>
                                                            <span>Click or drag image here</span>
                                                        </div>
                                                        <img id="imagePreview<%= i+1 %>" src="<%= product.images[i] ? '/uploads/' + product.images[i] : '#' %>" alt="Preview" class="img-preview" style="display: <%= product.images[i] ? 'block' : 'none' %>;">
                                                    </label>
                                                    <div class="image-actions" id="actions<%= i+1 %>"></div>
                                                </div>
                                                <button type="button" class="btn btn-primary mt-2" onclick="openCropper(<%= i+1 %>)">Crop Image</button>
                                            </div>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Second column -->
                        <div class="col-12 col-lg-4">
                          
                            <div class="card mb-6">
                                <div class="card-header">
                                    <h5 class="card-title mb-0">Pricing</h5>
                                </div>
                                <div class="card-body">
                                    <div class="form-floating form-floating-outline mb-5 formgroup1">
                                        <input type="number" class="form-control" id="product-price" placeholder="Price" name="productPrice" value="<%= product.price %>" required>
                                        <label for="ecommerce-product-price" class="errMsgSignup">Price</label>
                                    </div>
                                    <div class="form-floating form-floating-outline mb-5 formgroup1">
                                        <input type="number" class="form-control" id="product-count" placeholder="Product Count" name="productCount" value="<%= product.stock %>" required>
                                        <label for="productCount" class="errMsgSignup">Product Count</label>
                                    </div>
                                    <div class="form-floating form-floating-outline form-floating-select2 pb-3">
                                        <div class="position-relative">
                                            <label for="category" class="errMsgSignup">Select Category</label>
                                            <select name="categorySelection" id="category" class="form-select" required>
                                                <option value="">Select Category</option>
                                                <% categories.forEach(category => { %>
                                                    <option value="<%= category._id %>" 
                                                        <%= category._id.toString() === product.category.toString() ? 'selected' : '' %>>
                                                        <%= category.categoryName %>
                                                    </option>
                                                <% }); %>
                                            </select>
                                        </div>
                                    </div>
                                    
                                    <div class="form-floating form-floating-outline form-floating-select2 pt-2">
                                        <div class="position-relative">
                                            <label for="product-status" class="errMsgSignup">Select Product Status</label>
                                            <select name="productOption" id="product-status" class="form-select" required>
                                                <option value="true" <%= product.isListed ? 'selected' : '' %>>Listed</option>
                                                <option value="false" <%= !product.isListed ? 'selected' : '' %>>Unlisted</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>

 


    </div> 
    
    <script defer src="https://cdn.crop.guide/loader/l.js?c=TCTRMB"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>


    <script>
      
function validateForm() {
    let isValid = true;
    const productName = document.getElementById('product-name');
    const productDescription = document.getElementById('product-description');
    const productPrice = document.getElementById('product-price');
    const productCount = document.getElementById('product-count');
    const category = document.getElementById('category');
    const productStatus = document.getElementById('product-status');
    const imageInputs = document.querySelectorAll('.imageInput');

    // Validate Product Name
    if (productName.value.trim() === '') {
    showError(productName, 'Product Name is required');
    isValid = false;
    } else if (!/^[A-Za-z\s]+$/.test(productName.value.trim())) {
        showError(productName, 'Product Name can only contain letters');
        isValid = false;
    } else {
        removeError(productName);
    }
    
    // Validate Product Description
    if (productDescription.value.trim() === '') {
        showError(productDescription, 'Product Description is required');
        isValid = false;
    } else {
        removeError(productDescription);
    }

    // Validate Product Price
    if (productPrice.value.trim() === '' || isNaN(productPrice.value) || Number(productPrice.value) <= 0) {
        showError(productPrice, 'Please enter a valid price');
        isValid = false;
    } else {
        removeError(productPrice);
    }

    // Validate Product Count
    if (productCount.value.trim() === '' || isNaN(productCount.value) || Number(productCount.value) < 0) {
        showError(productCount, 'Please enter a valid product count');
        isValid = false;
    } else {
        removeError(productCount);
    }

    // Validate Category Selection
    if (category.value === '') {
        showError(category, 'Please select a category');
        isValid = false;
    } else {
        removeError(category);
    }

    // Validate Product Status
    if (productStatus.value === '') {
        showError(productStatus, 'Please select a product status');
        isValid = false;
    } else {
        removeError(productStatus);
    }

    // Validate Images
    let hasImage = false;
    imageInputs.forEach((input, index) => {
        const existingImage = document.getElementById(`existingImage${index + 1}`).value;
        if (input.files.length > 0 || existingImage) {
            hasImage = true;
        }
    });

    if (!hasImage) {
        showError(imageInputs[0], 'At least one product image is required');
        isValid = false;
    } else {
        removeError(imageInputs[0]);
    }

    return isValid;
}

// Function to show error message
function showError(input, message) {
    const formGroup = input.closest('.formgroup1') || input.parentElement;
    const errorElement = formGroup.querySelector('.error-message') || document.createElement('div');
    errorElement.className = 'error-message text-danger mt-1';
    errorElement.textContent = message;
    if (!formGroup.querySelector('.error-message')) {
        formGroup.appendChild(errorElement);
    }
    input.classList.add('is-invalid');
}

// Function to remove error message
function removeError(input) {
    const formGroup = input.closest('.formgroup1') || input.parentElement;
    const errorElement = formGroup.querySelector('.error-message');
    if (errorElement) {
        formGroup.removeChild(errorElement);
    }
    input.classList.remove('is-invalid');
}

// Event listener for form submission
document.getElementById('editProductForm').addEventListener('submit', async function(event) {
    event.preventDefault();

    if (!validateForm()) {
        return; // Stop form submission if validation fails
    }

    const formData = new FormData();
    const imageInputs = document.querySelectorAll('.imageInput');

    formData.append('productTitle', document.getElementById('product-name').value);
    formData.append('ProductDescription', document.getElementById('product-description').value);
    formData.append('productPrice', document.getElementById('product-price').value);
    formData.append('categorySelection', document.getElementById('category').value);
    formData.append('productCount', document.getElementById('product-count').value);
    formData.append('productOption', document.getElementById('product-status').value);

    imageInputs.forEach((input, index) => {
        if (input.files.length > 0) {
            formData.append(`productImage${index + 1}`, input.files[0]);
        } else {
            formData.append(`existingImage${index + 1}`, document.getElementById(`existingImage${index + 1}`).value);
        }
    });

    try {
        const response = await fetch('/admin/product/editProduct/<%= product._id %>', {
            method: 'POST',
            body: formData
        });

        const data = await response.json();
        if (data.success) {
            Swal.fire({
                title: 'Success!',
                text: data.message,
                icon: 'success',
                confirmButtonText: 'OK'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/admin/product';
                }
            });
        } else {
            Swal.fire({
                title: 'Error!',
                text: data.message,
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    } catch (error) {
        console.error('Error during fetch request:', error.message);
        Swal.fire({
            title: 'Error!',
            text: 'An error occurred while updating the product.',
            icon: 'error',
            confirmButtonText: 'OK'
        });
    }
});

function previewImage(input, previewId) {
    const preview = document.getElementById(previewId);
    const file = input.files[0];
    const reader = new FileReader();

    reader.onload = function () {
        preview.src = reader.result;
        preview.style.display = 'block';
        input.closest('.image-upload-container').querySelector('.upload-placeholder').style.display = 'none';
        
        // Add remove button if it doesn't exist
        const actionsDiv = input.closest('.image-upload-container').querySelector('.image-actions');
        if (!actionsDiv.querySelector('.remove-btn')) {
            const removeBtn = document.createElement('button');
            removeBtn.textContent = 'Remove';
            removeBtn.className = 'btn btn-danger btn-sm mt-2 remove-btn';
            removeBtn.onclick = function() { removeImage(previewId, input, previewId.replace('imagePreview', '')); };
            actionsDiv.appendChild(removeBtn);
        }
    }

    if (file) {
        reader.readAsDataURL(file);
    } else {
        preview.src = "";
        preview.style.display = 'none';
        input.closest('.image-upload-container').querySelector('.upload-placeholder').style.display = 'flex';
    }
}

function removeImage(previewId, input, imageNumber) {
    const preview = document.getElementById(previewId);
    const actionsDiv = document.getElementById(`actions${imageNumber}`);
    const existingImageInput = document.getElementById(`existingImage${imageNumber}`);
    
    input.value = '';
    preview.src = '';
    preview.style.display = 'none';
    if (existingImageInput) {
        existingImageInput.value = '';
    }
    
    input.closest('.image-upload-container').querySelector('.upload-placeholder').style.display = 'flex';
    
    const removeBtn = actionsDiv.querySelector('.remove-btn');
    if (removeBtn) {
        actionsDiv.removeChild(removeBtn);
    }
}
    </script>

</body>




<%- include('../admin-layouts/footer.ejs') %>
